/***********************
*   Jay Prakash Mahto  *
*       JVJplus        *
************************/

#include<bits/stdc++.h>
using namespace std;

typedef long long int                  ll; 
typedef pair<int,int>                  pii;
typedef vector<int>                    vi; 
typedef vector<vi>                     vvi; 

#define fi                             first
#define se                             second
#define INF                            0x3f3f3f3f
#define MOD                            1000000007
#define pb                             push_back
#define NL                             cout<<endl;
#define EL                             cerr<<endl;
#define For(i,b)                       for(int i=0;i<b;i++)
#define FoR(i,a,b)                     for(int i=a;i>=b;i--)
#define FOR(i,a,b)                     for(int i=a;i<b;i++)
#define forit(v, c)                    for(auto v:c)
#define min3(a,b,c)                    min(a,min(b,c))
#define max3(a,b,c)                    max(a,max(b,c))
#define all(a)                         a.begin(), a.end()
#define MS0(X)                         memset((X), 0, sizeof((X)))
#define MS1(X)                         memset((X), -1, sizeof((X)))
#define TCase                          int ___T, case_n = 1; cin>>___T; while (___T-- > 0)
#define sz(a)                          (int)(a.size())
#define fast_io                        ios_base::sync_with_stdio(false);cin.tie(NULL);
#define sublimeProblem                 freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout); freopen("debug_log.txt", "w", stderr);

void buildTree(int *arr,int *tree,int start,int end,int index){
    if(start==end){
        tree[index]=arr[start];
        return ;
    }
    int mid=(start+end)>>1;
    buildTree(arr,tree,start,mid,2*index);
    buildTree(arr,tree,mid+1,end,2*index+1);
    tree[index]=min(tree[2*index],tree[2*index+1]);
}

void updateTree(int *arr,int *tree,int start,int end,int tIdx, int idx, int value){
    if(start==end){
        arr[idx]=value;
        tree[tIdx]=value;
        return ;
    }
    int mid=(start+end)>>1;
    if(mid<idx)
        updateTree(arr,tree,mid+1,end,2*tIdx+1,idx,value);
    else
        updateTree(arr,tree,start,mid,2*tIdx,idx,value);
    
    tree[tIdx]=min(tree[2*tIdx],tree[2*tIdx+1]);
}

int query(int *tree,int start,int end,int tidx,int left,int right){
    //completely outside
    if(end<left || start>right)
        return INT_MAX;

    //completely inside
    if(start>=left && end<=right)
        return tree[tidx];

    //partially
    int mid=(start+end)>>1;
    int a1=query(tree,start,mid,2*tidx,left,right);
    int a2=query(tree,mid+1,end,2*tidx+1,left,right);
    return min(a1,a2);
}

int main()
{
    fast_io;
    //sublimeProblem;

    int n,q;
    cin>>n>>q;
    int arr[n];
    For(i,n)
    cin>>arr[i];

    int tree[4*n];
    buildTree(arr,tree,0,n-1,1);

    while(q--){
        char c;
        cin>>c;

        if(c=='q'){
            int l,r;
            cin>>l>>r;
            l--,r--;
            cout<<query(tree,0,n-1,1,l,r);
            NL;
        }
        else{
            int x,y;
            cin>>x>>y;
          x--;
          updateTree(arr,tree,0,n-1,1,x,y);
        }
    }
}
