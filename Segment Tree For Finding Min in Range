/***********************
*   Jay Prakash Mahto  *
*       JVJplus        *
************************/

#include<bits/stdc++.h>
using namespace std;

typedef long long int                  ll; 
typedef pair<int,int>                  pii;
typedef vector<int>                    vi; 
typedef vector<bool>                   vb;
#define fi                             first
#define se                             second
#define all(a)                         a.begin(), a.end()
#define INF                            0x3f3f3f3f
#define MOD                            1000000007
#define pb                             push_back
#define NL                             cout<<endl;
#define EL                             cerr<<endl;
#define For(i,b)                       for(int i=0;i<b;i++)
#define FoR(i,a,b)                     for(int i=a;i>=b;i--)
#define FOR(i,a,b)                     for(int i=a;i<b;i++)
#define MS0(X)                         memset((X), 0, sizeof((X)))
#define MS1(X)                         memset((X), -1, sizeof((X)))
#define forit(v, c)                    for(auto v:c)
#define whileNE(x)                     while(!x.empty())
#define present(c,x)                   ((c).find(x) != (c).end()) 
#define cntbit                         __builtin_popcountll
#define REMAX(a,b)                     (a)=max((a),(b)) // set a to the maximum of a and b
#define REMIN(a,b)                     (a)=min((a),(b));
#define sz(a)                          (int)(a.size())
#define fast_io                        ios_base::sync_with_stdio(false);cin.tie(NULL);
#define sublimeProblem                 freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout); freopen("debug_log.txt", "w", stderr);
#define TCase                          int ___T, case_n = 1; cin>>___T; while (___T-- > 0)

#define print(x)                       cout<<x;
#define print2(x,y)                    cout<<x<<" "<<y;
#define accept_arr(arr,N)              For(i,N) cin>>arr[i];
#define print1d(arr,length)            for(int i=0;i<length;i++) cout<<arr[i]<<" "; cout<<'\n';
#define print1D(arr,start,length)      for(int i=start;i<length;i++) cout<<arr[i]<<" "; cout<<'\n';
#define print2d(arr,n)                 For(i,n){For(j,n){cout<<arr[i][j]<<" ";}cout<<endl;}
#define print2D(arr,m,n)               For(i,m){For(j,n){cout<<arr[i][j]<<" ";}cout<<endl;}
#define gets(n)                        getline(cin,n); cin.ignore();
#define input_array                    int n;cin>>n;int arr[n];For(i,n) cin>>arr[i];

#define dbg(...) __dbg(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __dbg(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << std::endl;}
template <typename Arg1, typename... Args>
void __dbg(const char* names, Arg1&& arg1, Args&&... args){const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__dbg(comma+1, args...);}

#define treeNode node
#define left (treeNode<<1)+1
#define right (treeNode<<1)+2
#define MID ((s+e)>>1)
#define _N 100005

int N;
int arr[_N];
int tree[_N*4];

void build(int s=0,int e=N-1,int node=0){
    if(s==e){
        tree[node]=arr[s];
        return ;
    }
    int mid=MID;
    build(s,mid,left);
    build(mid+1,e,right);
    tree[node]=min(tree[left],tree[right]);
}

void update(int u_idx,int u_val,int s=0,int e=N-1,int node=0){
    if(s==e){
        tree[node]=u_val;
        arr[u_idx]=u_val;
        return;
    }
    if(u_idx<=MID)
        update(u_idx,u_val,s,MID,left);
    else
        update(u_idx,u_val,MID+1,e,right);

    tree[node]= min(tree[left],tree[right]);
}

int query(int l,int r,int s=0,int e=N-1,int node=0){
    if(l>e || r<s)
        return INF;

    if(l<=s && r>=e)
        return tree[node];
        
    //partial
    return min(query(l,r,s,MID,left),query(l,r,MID+1,e,right));
}

int main()
{
    //sublimeProblem;
    fast_io;

    int Q;
    cin>>N>>Q;
    accept_arr(arr,N);
    build();

    For(i,Q){
        char c;
        int x,y;
        cin>>c>>x>>y;
        if(c=='q'){
            x--,y--;
            cout<<query(x,y)<<endl;
        }
        else{
            x--;
            update(x,y);
        }

    }
}
